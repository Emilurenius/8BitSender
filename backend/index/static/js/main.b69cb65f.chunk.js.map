{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","class","onClick","id","value","NumInput","type","placeholder","App","handleSend","e","console","log","text","document","getElementById","binaryData","parseInt","toString","eightBit","Array","length","fill","join","bitData","i","charAt","requestOptions","method","headers","body","JSON","stringify","fetch","path","origin","URL","location","url","handleBitChange","target","state","bits","this","React","Component","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"uOAWA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAWD,EAAME,MAAOC,QAASH,EAAMG,QAASC,GAAIJ,EAAMI,GAAlE,SACGJ,EAAMK,QAKb,SAASC,EAASN,GAChB,OACE,uBAAOO,KAAK,SAASN,UAAWD,EAAME,MAAOE,GAAIJ,EAAMI,GAAII,YAAaR,EAAMQ,c,IAI5EC,E,kDAEJ,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAMRU,WAAa,SAACC,GACZC,QAAQC,IAAI,gBAEZ,IAAMC,EAAOC,SAASC,eAAe,SAASX,MACxCY,EAAaC,SAASJ,GAAMK,SAAS,GACrCC,EAAQ,UAAM,IAAIC,MAAM,EAAIJ,EAAWK,QAAQC,KAAK,KAAKC,KAAK,KAAtD,OAA4DP,EAA5D,KACdL,QAAQC,IAAIO,GAGZ,IADA,IAAIK,EAAU,GACLC,EAAE,EAAGA,EAAEN,EAASE,OAAQI,IAC/BD,EAAQ,IAAD,OAAKC,IAAON,EAASO,OAAOD,GAErCd,QAAQC,IAAIY,GAEZ,IAAMG,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUR,IAEvBS,MAhDJ,SAAaC,GACX,IAAMC,EAAS,IAAIC,IAAItB,SAASuB,UAAUF,OAC1C,MAAM,GAAN,OAAUA,GAAV,OAAmBD,GA8CXI,CAAI,YAAaX,IA1BN,EA6BnBY,gBAAkB,SAAC7B,GACjBC,QAAQC,IAAR,uBAA4BF,EAAE8B,OAAOrC,KAErC,EAAKsC,MAAM/B,EAAE8B,OAAOrC,KAAO,EAAKsC,MAAM/B,EAAE8B,OAAOrC,IAC/CQ,QAAQC,IAAI,EAAK6B,MAAM/B,EAAE8B,OAAOrC,KAE5B,EAAKsC,MAAM/B,EAAE8B,OAAOrC,IACtBO,EAAE8B,OAAOxC,UAAY,eAErBU,EAAE8B,OAAOxC,UAAY,kBApCvB,EAAKyC,MAAQ,CACXC,KAAMtB,MAAM,GAAGE,MAAK,IAHL,E,0CA0CnB,WACE,OACE,sBAAKtB,UAAU,OAAOG,GAAG,OAAzB,UAEE,8BACE,mDAEE,cAACE,EAAD,CACEJ,MAAM,SACNE,GAAG,QACHI,YAAY,YAKlB,cAACT,EAAD,CACEM,MAAM,YACND,GAAG,aACHF,MAAM,SACNC,QAASyC,KAAKlC,oB,GA/DNmC,IAAMC,WAuExBC,IAASC,OACP,cAAC,EAAD,IACAjC,SAASC,eAAe,SAGXP,QCzFAwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdH,IAASC,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEF3C,SAASC,eAAe,SAM1BiC,M","file":"static/js/main.b69cb65f.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom';\n\nimport './App.css';\n\nfunction url(path) {\n  const origin = new URL(document.location).origin\n  return `${origin}${path}`\n  //return `http://raspi4:3000${path}`\n}\n\nfunction Button(props) { // Simple button template\n  return (\n    <button className={props.class} onClick={props.onClick} id={props.id}>\n      {props.value}\n    </button>\n  )\n}\n\nfunction NumInput(props) { // Simple input template\n  return (\n    <input type=\"number\" className={props.class} id={props.id} placeholder={props.placeholder}/>\n  )\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      bits: Array(8).fill(false)\n    }\n  }\n\n  handleSend = (e) => {\n    console.log('Sending bits')\n\n    const text = document.getElementById('dType').value // Get text value of dice type input\n    const binaryData = parseInt(text).toString(2) // Turn dice number into binary\n    const eightBit = `${new Array(7 - binaryData.length).fill('0').join('')}${binaryData}0` // Convert to 8 bit, and add analog/digital mode bit.\n    console.log(eightBit)\n\n    let bitData = {}\n    for (let i=0; i<eightBit.length; i++) {\n      bitData[`b${i}`] = eightBit.charAt(i)\n    }\n    console.log(bitData)\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(bitData)\n    }\n    fetch(url('/setpins'), requestOptions)\n  }\n\n  handleBitChange = (e) => {\n    console.log(`bit flipped: ${e.target.id}`)\n\n    this.state[e.target.id] = !this.state[e.target.id]\n    console.log(this.state[e.target.id])\n\n    if (this.state[e.target.id]) {\n      e.target.className = 'checkChecked'\n    }else {\n      e.target.className = 'checkUnchecked'\n    }\n  }\n\n  render() {\n    return (\n      <div className='main' id='main'>\n        \n        <div>\n          <p>\n            I want to roll a D\n            <NumInput \n              class='textIn'\n              id='dType'\n              placeholder='20'\n            />\n          </p>\n        </div>\n\n        <Button \n          value='Send data'\n          id='sendButton'\n          class='button'\n          onClick={this.handleSend}\n        />\n      </div>\n    );\n  }\n  \n}\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}